@startuml
class User <<interface>>{

getUserName() : String
}

class KeyStoreUser <<interface>> extends User{
getKeyAlias() : String
getKeyPassword() : String
}

class SigningUser <<interface>> extends User{
getPrivateKey() : PrivateKey
}

class CandidateUser <<interface>> extends User{
getPublicKey() : PublicKey
getEncryptedRequestKey() : String
}

class AuthenticatedUser <<interface>> extends User{
getUserAuthenticationDate() : Date
}

class AuthenticatedUserWithRoles <<interfaces>> extends AuthenticatedUser{
hasRole(role : Role)
}

class AbstractUser <<abstract>> implements User{
- userName : String
+ getUserName : String
}

class KeyStoreUserImpl extends AbstractUser implements KeyStoreUser{
- keyAlias : String
- keyPassword : String
+ getKeyAlias : String
+ getKeyPassword : String
}

class SigningUserImpl extends AbstractUser implements SigningUser{
- privateKey : PrivateKey
+ getPrivateKey : PrivateKey
}

class CandidateUserImpl extends AbstractUser implements CandidateUser{
- publicKey : PublicKey
- encryptedRequestKey : String
+ getPublicKey : PublicKey
+ getEncryptedRequestKey : String
}

class AuthenticatedUserImpl extends AbstractUser implements AuthenticatedUser{
- userAuthenticationDate : Date
+ getUserAuthenticationDate : Date
}

class AuthenticatedUserWithRolesImpl extends AuthenticatedUserImpl implements AuthenticatedUserWithRoles{
- roles : Set<Role>
+ hasRole(role : Role) : boolean
}

@enduml
